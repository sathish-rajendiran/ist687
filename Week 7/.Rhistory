rand <- sample(1:nrows)
head(rand)
bd.train <- bd[rand[1:cutPoint],]
bd.test <- bd[rand[cutPoint+1:nrows],]
str(bd.train)
str(bd.test)
bd.test  <- bd[rand[(cutPoint+1):nrows],]
str(bd.test)
str(bd.train)
str(bd.test)
model <- ksvm(y~.data=bd.train)
install.packages("ksvm")
install.packages("kernlab")
library(kernlab)
model <- ksvm(y~.data=bd.train)
model <- ksvm(y~.,data=bd.train)
model
pred <- predict(model,bd.test)
table(pred,bd.test$y)
(1286+37)/4051
results <- table(pred,bd.test$y)
results
totalCorrect <- results[1,1] + results[2,2]
totalCorrect
totalInTest <- nrow(bd.test)
testAccuracy <- totalCorrect/totalInTest
testAccuracy
testAccuracy *100
model.1 <- ksvm(y~ education, data=bd.train)
model.1
pred.1 <- predict(model.1,bd.test)
results.1 <- table(pred.1,bd.test$y)
results.1
totalCorrect.1 <- results.1[1,1] + results.1[2,2]
totalCorrect.1
totalInTest.1 <- nrow(bd.test)
testAccurac.1 <- totalCorrect.1/totalInTest.1
testAccuracy.1 *100
testAccuracy.1 <- totalCorrect.1/totalInTest.1
testAccuracy.1 *100
results.1
install.packages( pkgs=c("kernlab","gdata","RCurl","ggplot2","ggcorrplot","reshape2","ggeasy","viridis","viridisLite"),repos = "http://cran.us.r-project.org")
install.packages(pkgs = c("kernlab", "gdata", "RCurl", "ggplot2", "ggcorrplot", "reshape2", "ggeasy", "viridis", "viridisLite"), repos = "http://cran.us.r-project.org")
library(kernlab)
library(gdata)
library(RCurl)
library(ggplot2)
library(ggcorrplot)
library(reshape2)
library(ggeasy)
library(viridis)
library(viridisLite)
library(kernlab)
library(gdata)
library(RCurl)
library(ggplot2)
library(ggcorrplot)
library(reshape2)
library(ggeasy)
library(viridis)
library(viridisLite)
myairquality <- data.frame(airquality)
# function printDataInfo
printDataInfo <- function(myData)
{
strinfo <- str(myData)
cat("str:",strinfo,"\n")
colnamesinfo <- colnames(myData)
cat("colnames:",colnamesinfo,"\n")
diminfo <- dim(myData)
cat("dim:",diminfo,"\n")
nrowinfo <- nrow(myData)
cat("nrow:",nrowinfo,"\n")
nrowsinfo <- myData[1:3,]
return(nrowsinfo)
}
printDataInfo(myairquality)
#look for columns having NAs
clnames <- colnames(myairquality)[colSums(is.na(myairquality)) > 0]
clnames
meanOzone <- mean(myairquality$Ozone,na.omit=TRUE)
meanOzone
meanOzone <- mean(myairquality$Ozone)
meanOzone
myairquality$Ozone
#  create subset of dataframe rows having NAs
na_data <- myairquality[rowSums(is.na(myairquality)) > 0,]
na_data # 680- rows
# Check if the NAs in column "Ozone" and replace them by the mean value of this column
myairquality$Ozone[is.na(myairquality$Ozone)] <- mean(myairquality$Ozone, na.rm=TRUE)
myairquality$Ozone
na_data # 680- rows
myairquality$Ozone
clnames
# Check if the NAs in column "Solar.R" and replace them by the mean value of this column
myairquality$Solar.R[is.na(myairquality$Solar.R)] <- mean(myairquality$Solar.R, na.rm=TRUE)
#  create subset of dataframe rows having NAs
na_data <- myairquality[rowSums(is.na(myairquality)) > 0,]
na_data # 680- rows
myairquality <- data.frame(airquality,stringsAsFactors=FALSE)
printDataInfo(myairquality)
#look for columns having NAs
clnames <- colnames(myairquality)[colSums(is.na(myairquality)) > 0]
clnames
#  create subset of dataframe rows having NAs
na_data <- myairquality[rowSums(is.na(myairquality)) > 0,]
na_data # 680- rows
# Check if the NAs in column "Ozone" and replace them by the mean value of this column
myairquality$Ozone[is.na(myairquality$Ozone)] <- round(as.numeric(mean(myairquality$Ozone, na.rm=TRUE)),0)
# Check if the NAs in column "Solar.R" and replace them by the mean value of this column
myairquality$Solar.R[is.na(myairquality$Solar.R)] <- round(as.numeric(mean(myairquality$Solar.R, na.rm=TRUE)),0)
#  Verify if the dataframe has NAs
na_data <- myairquality[rowSums(is.na(myairquality)) > 0,]
na_data # 680- rows
myairquality[1:10]
myairquality[1:10,]
# find total number of rows
nrows <- nrow(myairquality)
nrows
#find the cut point by taking 2/3rd of the total number of rows
cutPoint <- floor(2*nrows/3)
cutPoint
rand <- sample(1:nrows)
head(rand)
# find total number of rows
airQ <- myairquality
nrows <- nrow(airQ)
airQ <- myairquality
nrows <- nrow(airQ)
nrows
rem(myairquality)  #to avoid confusions
remove(myairquality)  #to avoid confusions
#find the cut point by taking 2/3rd of the total number of rows
cutPoint <- floor(2*nrows/3)
cutPoint
rand <- sample(1:nrows)
head(rand)
airQ.train <- airQ[rand[1:cutPoint],]
airQ.test  <- airQ[rand[(cutPoint+1):nrows],]
str(airQ.train)
str(airQ.test)
str(airQ.train)
str(airQ.test)
# Plot histogram on countries data to analyze the data spread for missing data elements
hcolor <- c("orange")
hfill <- c("steelblue")
htitle <- c("Histogram - Data availability")
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
gghist <- ggplot(data=melt(myairquality),mapping = aes(x= value))
myairquality <- data.frame(airquality,stringsAsFactors=FALSE)
#look for columns having NAs
clnames <- colnames(myairquality)[colSums(is.na(myairquality)) > 0]
clnames
#  create subset of dataframe rows having NAs
na_data <- myairquality[rowSums(is.na(myairquality)) > 0,]
na_data # 680- rows
# Check if the NAs in column "Ozone" and replace them by the mean value of this column
myairquality$Ozone[is.na(myairquality$Ozone)] <- round(as.numeric(mean(myairquality$Ozone, na.rm=TRUE)),0)
# Check if the NAs in column "Solar.R" and replace them by the mean value of this column
myairquality$Solar.R[is.na(myairquality$Solar.R)] <- round(as.numeric(mean(myairquality$Solar.R, na.rm=TRUE)),0)
#  Verify if the dataframe has NAs
na_data <- myairquality[rowSums(is.na(myairquality)) > 0,]
na_data # 680- rows
myairquality[1:10,]
# Plot histogram on countries data to analyze the data spread for missing data elements
hcolor <- c("orange")
hfill <- c("steelblue")
htitle <- c("Histogram - Data availability")
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
gghist <- ggplot(data=melt(myairquality),mapping = aes(x= value))
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE)+facet_wrap(~variable,scales = "free_x")
# import airquality dataset
?airquality
gghist + theme_void() +
labs(x = NULL,
y = NULL,
title = "New York Air Quality Measurements",
caption = "Data: Daily air quality measurements in New York, May to September 1973") +theme
gghist + theme_void() +
labs(x = NULL,
y = NULL,
title = "New York Air Quality Measurements",
caption = "Data: Daily air quality measurements in New York, May to September 1973")
gghist + theme_void() +
labs(x = NULL,
y = NULL,
title = "New York Air Quality Measurements",
caption = "Data: Daily air quality measurements in New York, May to September 1973") +theme
gghist <- ggplot(data=melt(myairquality),mapping = aes(x= value))
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE)
gghist + theme_void() + labs(x = NULL, y = NULL,
title = "New York Air Quality Measurements",
caption = "Data: Daily air quality measurements in New York, May to September 1973") +theme
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE) + facet_wrap(~variable,scales = "free_x")
gghist + theme_void() + labs(title = "New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist + theme_void() +
labs(x = NULL, y = NULL,title = "New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist +
labs(x = NULL, y = NULL,title = "New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
airQ <- myairquality
nrows <- nrow(airQ)
nrows
remove(myairquality)  #to avoid confusions
#find the cut point by taking 2/3rd of the total number of rows
cutPoint <- floor(2*nrows/3)
cutPoint
rand <- sample(1:nrows)
head(rand)
airQ.train <- airQ[rand[1:cutPoint],]
airQ.test  <- airQ[rand[(cutPoint+1):nrows],]
str(airQ.train)  # 102 observations
str(airQ.test) # 51 observations
# Plot histogram on countries data to analyze the data spread for missing data elements
hcolor <- c("orange")
hfill <- c("steelblue")
htitle <- c("Histogram - Data availability")
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
gghist <- ggplot(data=melt(myairquality),mapping = aes(x= value))
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE) + facet_wrap(~variable,scales = "free_x") +scale_fill_viridis(option = "viridis", direction = -1)
gghist +
labs(x = NULL, y = NULL,title = "New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE) + facet_wrap(~variable,scales = "free_x")
gghist +
labs(x = NULL, y = NULL,title = "New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
airQ <- myairquality
nrows <- nrow(airQ)
nrows
remove(myairquality)  #to avoid confusions
#find the cut point by taking 2/3rd of the total number of rows
cutPoint <- floor(2*nrows/3)
cutPoint
rand <- sample(1:nrows)
head(rand)
airQ.train <- airQ[rand[1:cutPoint],]
airQ.test  <- airQ[rand[(cutPoint+1):nrows],]
str(airQ.train)  # 102 observations
str(airQ.test) # 51 observations
# Plot histogram on countries data to analyze the data spread for missing data elements
hcolor <- c("green")
hfill <- c("brown")
htitle <- c("Histogram - Data availability")
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
gghist <- ggplot(data=melt(airQ),mapping = aes(x= value))
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE) + facet_wrap(~variable,scales = "free_x")
gghist +
labs(x = NULL, y = NULL,title = "New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
# Plot histogram on countries data to analyze the data spread for missing data elements
hcolor <- c("steelblue")
hfill <- c("brown")
# Plot histogram on countries data to analyze the data spread for missing data elements
hcolor <- c("steelblue")
hfill <- c("brown")
htitle <- c("New York Air Quality Measurements")
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
gghist <- ggplot(data=melt(airQ),mapping = aes(x= value))
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE) + facet_wrap(~variable,scales = "free_x")
gghist +
labs(x = NULL, y = NULL, caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
hfill <- c("yellow")
htitle <- c("New York Air Quality Measurements")
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
gghist <- ggplot(data=melt(airQ),mapping = aes(x= value))
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE) + facet_wrap(~variable,scales = "free_x")
gghist +
labs(x = NULL, y = NULL, caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
# Plot histogram on countries data to analyze the data spread for missing data elements
hcolor <- c("red")
hfill <- c("yellow")
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
gghist <- ggplot(data=melt(airQ),mapping = aes(x= value))
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE) + facet_wrap(~variable,scales = "free_x")
gghist +
labs(x = NULL, y = NULL, title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
model <- ksvm(Ozone~.,data=airQ.train)
model
pred <- predict(model,airQ.test)
results <- table(pred,airQ.test$Ozone)
results
pred <- predict(model,airQ.test)
results <- table(pred,airQ.test$Ozone)
results
str(results)
results
airQ.train[1:10,]
airQ.test[1:10,]
#predict Ozone values from all the variables in the train dataset
model <- ksvm(Ozone~.,data=airQ.train,kernel="rbfdot",kpar="automatic",C=10,cross=10,prob.model=TRUE)
model
pred <- predict(model,airQ.test,type="votes")
str(pred)
str(pred)
pred
# create a dataframe to have actual and preicted Ozone values
model.pred <- data.frame(airQ.test$Ozone,pred[,1])
colnames(model.pred) <- c("Test.Ozone, Pred.Ozone")
colnames(model.df) <- c("Test.Ozone, Pred.Ozone")
colnames(model.df) <- c("Test.Ozone, Pred.Ozone")
# create a dataframe to have actual and preicted Ozone values
model.df <- data.frame(airQ.test$Ozone,pred[,1])
colnames(model.df) <- c("Test.Ozone, Pred.Ozone")
head(model.df)
colnames(model.df) <- c("Test.Ozone","Pred.Ozone")
head(model.df)
# create a dataframe to have actual and preicted Ozone values
model.df <- data.frame(airQ.test$Ozone,pred[,1],stringsAsFactors=FALSE)
colnames(model.df) <- c("Test.Ozone","Pred.Ozone")
head(model.df)
rmse <- sqrt(mean((model.df$Test.Ozone-model.df$Pred.Ozone)^2))
rmse
cat("Root Mean Squared Error is :",rmse)
abs.Error <- abs(model.df$Test.Ozone-model.df$Pred.Ozone)
abs.Error
abs.Error <- round(abs(model.df$Test.Ozone-model.df$Pred.Ozone),0
abs.Error <- round(abs(model.df$Test.Ozone-model.df$Pred.Ozone),0)
abs.Error <- round(abs(model.df$Test.Ozone-model.df$Pred.Ozone),0)
abs.Error
plot.df <- data.frame(airQ.test$Temp,airQ.test$Wind,abs.Error)
colnames(plot.df) <- c("Temp","Wind","Abs.Error")
gghist <- ggplot(plot.df,aes(x= Temp,y=Wind))
gghist <- ggplot(plot.df,aes(x= Temp,y=Wind))
gghist + geom_point(color="steel blue",aes(size=Abs.Error,color=Abs.Error))
gghist +
labs(x = "Temp", y = "Wind", title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist <- ggplot(plot.df,aes(x= plot.df$Temp,y=plot.df$Wind))
gghist + geom_point(color="steel blue",aes(size=plot.df$Abs.Error,color=plot.df$Abs.Error))
gghist +
labs(x = "Temp", y = "Wind", title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist <- ggplot(plot.df,aes(x= Temp,y=Wind))
gghist + geom_point(color="steel blue",aes(size=plot.df$Abs.Error,color=plot.df$Abs.Error))
gghist +
labs(x = "Temp", y = "Wind", title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist +
labs(x = Temp, y = Wind, title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist +
labs(x = NULL, y = NULL, title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist +
labs(x=Temp, y = Wind, title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist +
labs(title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist + geom_point(color="steel blue",aes(size=plot.df$Abs.Error,color=plot.df$Abs.Error))
gghist + geom_point(color="steel blue",aes(size=Abs.Error,color=Abs.Error))
gghist +
labs(title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist
gghist <- gghist + geom_point(color="steel blue",aes(size=Abs.Error,color=Abs.Error)) +
labs(title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist <- ggplot(plot.df,aes(x= Temp,y=Wind))
gghist <- gghist + geom_point(color="steel blue",aes(size=Abs.Error,color=Abs.Error)) +
labs(title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist
gghist
gghist + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=0.95)
gghist + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
gghist + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=.8)
gghist + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1.5)
gghist + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=.5)
gghist + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
gghist <- gghist + geom_point(aes(size=Abs.Error,color=Abs.Error)) +
labs(title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghist + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
gghist <- ggplot(plot.df,aes(x= Temp,y=Wind))
gghist <- gghist + geom_point(aes(size=Abs.Error,color=Abs.Error)) + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
ggscatter <- ggplot(plot.df,aes(x= Temp,y=Wind))
ggscatter <- ggscatter + geom_point(aes(size=Abs.Error,color=Abs.Error)) + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
ggscatter + labs(title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
gghistAll <- ggplot(data=melt(myairquality),mapping = aes(x= value))
myairquality <- data.frame(airquality,stringsAsFactors=FALSE)
#look for columns having NAs
clnames <- colnames(myairquality)[colSums(is.na(myairquality)) > 0]
clnames
#  create subset of dataframe rows having NAs
na_data <- myairquality[rowSums(is.na(myairquality)) > 0,]
na_data # 680- rows
# find and replace NAs on Ozone Column
myairquality$Ozone[is.na(myairquality$Ozone)] <- round(as.numeric(mean(myairquality$Ozone, na.rm=TRUE)),0)
# find and replace NAs on Solar.R Column
myairquality$Solar.R[is.na(myairquality$Solar.R)] <- round(as.numeric(mean(myairquality$Solar.R, na.rm=TRUE)),0)
#  Verify if the dataframe has NAs
na_data <- myairquality[rowSums(is.na(myairquality)) > 0,]
na_data # 680- rows
myairquality[1:10,]
# Plot histogram on countries data to analyze the data spread for missing data elements
hcolor <- c("orange")
hfill <- c("steelblue")
htitle <- c("Histogram - Data availability")
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
gghistAll <- ggplot(data=melt(myairquality),mapping = aes(x= value))
gghistAll <- gghistAll+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE) + facet_wrap(~variable,scales = "free_x")
gghistAll +
labs(x = NULL, y = NULL,title = "New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
# Plot histogram on countries data to analyze the data spread for missing data elements
hcolor <- c("red")
hfill <- c("yellow")
theme <-theme(plot.title = element_text(hjust = 0.5),axis.title = element_text())
gghist <- ggplot(data=melt(airQ),mapping = aes(x= value))
gghist <- gghist+geom_histogram(bins = 20,color=hcolor,fill=hfill,na.rm = TRUE) + facet_wrap(~variable,scales = "free_x")
gghist +
labs(x = NULL, y = NULL, title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
ggscatter + labs(title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
install.packages( pkgs=c("kernlab","e1071","gdata","RCurl","ggplot2","ggcorrplot","reshape2","ggeasy","viridis","viridisLite"),repos = "http://cran.us.r-project.org")
install.packages(pkgs = c("kernlab", "e1071", "gdata", "RCurl", "ggplot2", "ggcorrplot", "reshape2", "ggeasy", "viridis", "viridisLite"), repos = "http://cran.us.r-project.org")
library(kernlab)
library(e1071)
library(gdata)
library(RCurl)
library(ggplot2)
library(ggcorrplot)
library(reshape2)
library(ggeasy)
library(viridis)
library(viridisLite)
modelSVM <- svm(Ozone~.,data=airQ.train,kernel="rbfdot",kpar="automatic",C=10,cross=10,prob.model=TRUE)
modelSVM <- svm(Ozone~.,data=airQ.train,kpar="automatic",C=10,cross=10,prob.model=TRUE)
modelSVM <- svm(Ozone~.,data=airQ.train,prob.model=TRUE)
modelSVM
modelSVM <- svm(Ozone~.,data=airQ.train,C=10,cross=10,prob.model=TRUE)
modelSVM <- svm(Ozone~.,data=airQ.train,cross=10,prob.model=TRUE)
modelSVM <- svm(Ozone~.,data=airQ.train,prob.model=TRUE)
modelSVM
predSVM <- predict(modelSVM,airQ.test,type="votes")
str(predSVM)
# create a dataframe to have actual and preicted Ozone values
modelSVM.df <- data.frame(airQ.test$Ozone,pred[,1],stringsAsFactors=FALSE)
modelSVM <- svm(Ozone~.,data=airQ.train,prob.model=TRUE)
modelSVM
predSVM <- predict(modelSVM,airQ.test,type="votes")
str(predSVM)
# create a dataframe to have actual and preicted Ozone values
modelSVM.df <- data.frame(airQ.test$Ozone,predSVM[,1],stringsAsFactors=FALSE)
str(predSVM)
str(predSVM)
# create a dataframe to have actual and preicted Ozone values
modelSVM.df <- data.frame(airQ.test$Ozone,predSVM,stringsAsFactors=FALSE)
colnames(modelSVM.df) <- c("Test.Ozone","Pred.Ozone")
head(modelSVM.df)
head(model.df)
head(modelSVM.df)
rmseSVM <- sqrt(mean((modelSVM.df$Test.Ozone-modelSVM.df$Pred.Ozone)^2))
cat("Root Mean Squared Error is :",rmseSVM)
rmseKSVM <- sqrt(mean((model.df$Test.Ozone-model.df$Pred.Ozone)^2))
cat("Root Mean Squared Error is :",rmseKSVM)
cat("Root Mean Squared Error from SVM model is :",rmseSVM)
ggscatterKSVM <- ggplot(plot.df,aes(x= Temp,y=Wind))
ggscatterKSVM <- ggscatterKSVM + geom_point(aes(size=Abs.Error,color=Abs.Error)) + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
ggscatterKSVM + labs(title="New York Air Quality Measurements", caption = "Data: Daily air quality measurements in New York, May to September 1973")+theme
#create a dataframe
plot.df <- data.frame(airQ.test$Temp,airQ.test$Wind,abs.Error)
colnames(plot.df) <- c("Temp","Wind","Abs.Error")
abs.ErrorSVM <- round(abs(modelSVM.df$Test.Ozone-modelSVM.df$Pred.Ozone),0)
abs.ErrorSVM
#create a dataframe
plot.dfSVM <- data.frame(airQ.test$Temp,airQ.test$Wind,abs.ErrorSVM)
colnames(plot.dfSVM) <- c("Temp","Wind","Abs.Error")
ggscatterSVM <- ggplot(plot.dfSVM,aes(x= Temp,y=Wind))
ggscatterSVM <- ggplot(plot.dfSVM,aes(x= Temp,y=Wind))
ggscatterSVM <- ggplot(plot.dfSVM,aes(x= Temp,y=Wind))
ggscatterSVM <- ggscatterSVM + geom_point(aes(size=abs.ErrorSVM,color=abs.ErrorSVM)) + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
ggscatterSVM <- ggscatterSVM + geom_point(aes(size=abs.ErrorSVM,color=abs.ErrorSVM)) + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
ggscatterSVM + labs(title="SVM - New York Air Quality Measurements", caption = "Data: Based on SVM Model Output")+theme
ggscatterSVM + labs(title="New York Air Quality Measurements", caption = "Data: Based on SVM Model Output")+theme
ggscatterKSVM + labs(title="New York Air Quality Measurements", caption = "Data: Based on SVM Model Outpu")+theme
#create a dataframe
plot.df <- data.frame(airQ.test$Temp,airQ.test$Wind,abs.Error)
colnames(plot.df) <- c("Temp","Wind","Abs.Error")
ggscatterKSVM <- ggplot(plot.df,aes(x= Temp,y=Wind))
ggscatterKSVM <- ggscatterKSVM + geom_point(aes(size=Abs.Error,color=Abs.Error)) + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
ggscatterKSVM + labs(title="New York Air Quality Measurements", caption = "Data: Based on KSVM Model Output")+theme
ggscatterKSVM + labs(title="New York Air Quality Measurements", caption = "Data: Based on KSVM Model")+theme
ggscatterSVM + labs(title="New York Air Quality Measurements", caption = "Data: Based on SVM Model")+theme
ggscatterSVM + labs(title="Ozone Value Predictions", caption = "Data: Based on SVM Model")+theme
ggscatterKSVM + labs(title="Ozone Value Predictions", caption = "Data: Based on KSVM Model")+theme
ggscatterSVM <- ggplot(plot.dfSVM,aes(x= Temp,y=Wind),backgroundColor="white")
ggscatterSVM <- ggscatterSVM + geom_point(aes(size=abs.ErrorSVM,color=abs.ErrorSVM)) + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
ggscatterSVM + labs(title="Ozone Value Predictions", caption = "Data: Based on SVM Model")+theme
ggscatterSVM + labs(backgroundColor="white",title="Ozone Value Predictions", caption = "Data: Based on SVM Model")+theme
ggscatterSVM + labs(backgroundColor="white",title="Ozone Value Predictions", caption = "Data: Based on SVM Model")+theme +scale_color_manual(values = c("setosa" = "red", "versicolor" = "blue", "virginica" = "yellow"))
ggscatterSVM + labs(backgroundColor="white",title="Ozone Value Predictions", caption = "Data: Based on SVM Model")+theme
modelLM <- lm(formula = Ozone~., data=airQ.train)
modelLM
predLM <- predict(modelLM,airQ.test)
str(predLM)
# create a dataframe to have actual and preicted Ozone values
modelLM.df <- data.frame(airQ.test$Ozone,predLM,stringsAsFactors=FALSE)
colnames(modelLM.df) <- c("Test.Ozone","Pred.Ozone")
head(modelLM.df)
rmseLM <- sqrt(mean((modelLM.df$Test.Ozone-modelLM.df$Pred.Ozone)^2))
cat("Root Mean Squared Error from LM model is :",rmseLM)
abs.ErrorLM <- round(abs(modelLM.df$Test.Ozone-modelLM.df$Pred.Ozone),0)
abs.ErrorLM
#create a dataframe
plot.dfLM <- data.frame(airQ.test$Temp,airQ.test$Wind,abs.ErrorLM)
colnames(plot.dfLM) <- c("Temp","Wind","Abs.Error")
#create a dataframe
plot.dfLM <- data.frame(airQ.test$Temp,airQ.test$Wind,abs.ErrorLM)
colnames(plot.dfLM) <- c("Temp","Wind","Abs.Error")
ggscatterLM <- ggplot(plot.dfLM,aes(x= Temp,y=Wind))
ggscatterLM <- ggscatterLM + geom_point(aes(size=abs.ErrorLM,color=abs.ErrorLM)) + geom_smooth(method="auto", se=TRUE, fullrange=FALSE, level=1)
ggscatterLM + labs(backgroundColor="white",title="Ozone Value Predictions", caption = "Data: Based on LM Model")+theme
ggscatterSVM + labs(backgroundColor="white",title="Ozone Value Predictions", caption = "Data: Based on SVM Model")+theme
ggscatterKSVM + labs(title="Ozone Value Predictions", caption = "Data: Based on KSVM Model")+theme
ggscatterKSVM + labs(title="Ozone Value Predictions", caption = "Data: Based on KSVM Model")+theme
ggscatterLM <- ggscatterLM + labs(backgroundColor="white",title="Ozone Value Predictions", caption = "Data: Based on LM Model")+theme
ggscatterSVM<- ggscatterSVM + labs(backgroundColor="white",title="Ozone Value Predictions", caption = "Data: Based on SVM Model")+theme
ggscatterSVM
ggscatterLM <- ggscatterLM + labs(backgroundColor="white",title="Ozone Value Predictions", caption = "Data: Based on LM Model")+theme
ggscatterLM
ggscatterKSVM <- ggscatterKSVM + labs(title="Ozone Value Predictions", caption = "Data: Based on KSVM Model")+theme
ggscatterKSVM
grid.arrange(ggscatterKSVM,ggscatterSVM,ggscatterLM,ncol=2,nrow=2)
install.packages( pkgs=c("kernlab","e1071","gdata","RCurl","ggplot2","ggcorrplot","reshape2","ggeasy","viridis","viridisLite","gridExtra"),repos = "http://cran.us.r-project.org")
install.packages(pkgs = c("kernlab", "e1071", "gdata", "RCurl", "ggplot2", "ggcorrplot", "reshape2", "ggeasy", "viridis", "viridisLite", "gridExtra"), repos = "http://cran.us.r-project.org")
