hist(tempAir)
install.packages("moments")
data()
?BOD
?help(BOD)
istall.packages("sqldf")
install.packages("sqldf")
sqlResults <- sqldf('select * from mtcars')
sqlResults <- sqldf("select * from mtcars")
library(sqldf)
install.packages("RSQLite")
install.packages("RSQLite")
library(sqldf)
sqlResults <- sqldf("select * from mtcars")
sqlResults
mpgResults <- sqldf("select mtcars.mpg from mtcars")
mpgResults
mean(mpgResults)
na.omit(mpgResults)
mean(mpgResults)
str(sqlResults)
mpgResults
str(mpgResults)
mean(mpgResults$mpg)
mean(mpgResults)
mean(mpgResults$1)
mean(mpgResults$mpg)
mean(sqlResults$mpg)
mean(mpgResults$mpg)
cylResults <- sqldf("select mtcars.cyl from mtcars")
cylResults
results <- sqldf("select mtcars.mpg from mtcars where cyl = 4")
results
colnames(sqlResults)
sqldf("select count(mtcars.mpg) from mtcars where cyl = 4")
sqldf("select avg(mtcars.mpg) from mtcars where cyl = 4")
tapply(mpgResults$mpg,mpgResults$cyl,mean)
tapply(sqlResults$mpg,sqlResults$cyl,mean)
mean(mpgResults$mpg)
tapply(sqlResults$mpg,sqlResults$cyl,mean)
sqldf("select avg(mtcars.mpg) from mtcars where group by cyl")
sqldf("select avg(mtcars.mpg) from mtcars  group by cyl")
tapply(sqlResults$mpg,sqlResults$cyl==4,mean)
tapply(sqlResults$mpg,sqlResults$cyl==4,mean)
results <- tapply(sqlResults$mpg,sqlResults$cyl==4,mean)
results
results[1]
results[2]
unlist(results)
goodMPGcar <-function(mpg)
{
if(mpg>24)
return (TRUE)
return(FALSE)
}
goodMPGcar(results)
goodMPGcar(results[1])
goodMPGcar(results[2])
goodMPGcar(mtcars$mpg[2])
goodMPGcar(mtcars$mpg[8])
mtcars[8,]
sapply(mtcars$mpg,goodMPGcars)
sapply(mtcars$mpg,goodMPGcar)
mtcars$mpg
mtcars$cyl
tapply(mtcars$mpg,mtcars$cyl,meanplusSD)
meanplusSD <- function(v)
{
output <- mean(v) + sd(v)
return(v)
}
tapply(mtcars$mpg,mtcars$cyl,meanplusSD)
tapply(mtcars$mpg,mtcars$cyl,meanplusSD)
install.packages("jsonlite")
library(jsonlite)
install.packages("Rcurl")
install.packages("RCurl")
library(RCurl)
bikeURL <- "https://feeds.citibikenyc.com/stations/statons.json"
install.packages("RJSONIO")
library(RJSONIO)
bikeURL <- "https://feeds.citibikenyc.com/stations/statons.json"
apiResult <- getURL(bikeURL)
bikeURL <- "https://feeds.citibikenyc.com/stations/statons.json"
apiResult <- getURL(bikeURL)
library(RJSONIO)
apiResult <- getURL(bikeURL)
bikeURL <- "https://feeds.citibikenyc.com/stations/stations.json"
apiResult <- getURL(bikeURL)
load(apiResult)
result <- fromJSON(apiResult)
str(result)
result[1]
allBikesData <- result$stationBeanList
str(allBikesData)
allBikesData$stationName
allBikesData[2]
allBikesData[1]
allBikesData$id[1]
allBikesData$id[2]
allBikesData$id[1:10]
nrow(allBikesData)
allBikesData <- result$stationBeanList
str(allBikesData)
nrow(allBikesData)
str(result)
str(result)
result[1]
result[2]
result[1]
allBikesData <- result$stationBeanList
str(allBikesData)
nrow(allBikesData)
str(allBikesData)
allBikesData <- result$stationBeanList$[List of 18]
allBikesData <- result$stationBeanList$[2]
allBikesData <- result$stationBeanList[2]
allBikesData <- result$stationBeanList[List of 18]
allBikesData <- result$stationBeanList["List of 18"]
str(allBikesData)
allBikesData <- result$stationBeanList["List of 18"][1]
str(allBikesData)
nrow(allBikesData)
str(result)
length(allBikesData)
bikeURL <- "https://feeds.citibikenyc.com/stations/stations.json"
apiResult <- getURL(bikeURL)
load(apiResult)
result <- fromJSON(apiResult)
str(result)
result[1]
result[2]
result$stationBeanList
x <- result$stationBeanList
x
str(x)
nrow(allBikesData)
length(x)
nrow(x)
length(x)
length(x)
numrows <- length(x)
numrows
x[[1]]
station <- x[[1]]
station
station$id
df <- data.frame(matrix(unlist(x),nrow = 938),stringsAsFactors = FALSE)
head(df)
str(df)
str(df)
station$id
df <- data.frame(matrix(unlist(station),nrow = 938),stringsAsFactors = FALSE)
numrows <- length(x)
numrows
station <- x[[1]]
str(station)
df <- data.frame(matrix(unlist(x),nrow = 938),stringsAsFactors = FALSE)
head(df)
str(station)
df$X7
df$X8
#1. Load the CO2 dataset.
myCO2 <- CO2
#2. What is this data set?
?CO2
str(myCO2)
#1. Load the CO2 dataset.
myCO2 <- CO2
#2. What is this data set?
?CO2
str(myCO2)
class(myCO2)
summary(myCO2)
firstColumn <- myCO2[,1]
firstColumn
thirdColumn <- myCO2[,3]
thirdColumn
head(myCO2)
#4. Summary of all columns.
summary(myCO2)
firstColumn <- myCO2[,1]
#1. Load the CO2 dataset.
myCO2 <- CO2
str(myCO2)
colnames(myCO2)
nrow(myCO2)
myCO2$Treatment
myCO2$Plant
firstColumn <- myCO2[,1]
firstColumn
thirdColumn <- myCO2[,3]
thirdColumn
head(myCO2)
head(myCO2)
#4. Summary of all columns.
summary(myCO2)
#5. How many rows and what are the row indices.
rowNames <- rownames(myCO2)
numRows <- nrow(myCO2)
sprintf("%.0f - rows are in myCO2 data set",numRows)
sprintf("%s",rowNames)
tapply(myCO2$Type,myCO2$conc,mean)
subset(myCO2, Type == "Quebec")$conc
myDF <- function(df,typename)
{
myDFData <-subset(df,Type=="Quebec")
return(myDFData)
}
myDF(CO2,typename)
myDF <- function(df,typename)
{
myDFData <-subset(df,Type==typename)
return(myDFData)
}
myDF(CO2,"Quebec")
myDF(CO2,"Quebec")
myDF(CO2,"Mississippi")
myDF <- function(df,typename="Quebec")
{
myDFData <-subset(df,Type==typename)
return(myDFData)
}
myDF(CO2,"Mississippi")
myDF(CO2,"Mississi")
myDF(CO2,"Mississi")
myDF(CO2)
myCO2[[1]]
myCO2[[3]]
myCO2[3]
myCO2$Treatment
myCO2[3]
myCO2[Treatment]
myCO2$Treatment
myCO2$Treatment
myCO2[3]
head(myCO2)
myCO2[3]
sample(myCO2,3)
sample(myCO2,3)
sample(myCO2,3)
```{r}
sample(myCO2,3)
myCars <- cars
?myCars
str(myCars)
colname(myCars)
colnames(myCars)
rownames(myCars)
length(myCars)
nrow(myCars)
str(myCars)
?cars
myCars[,1]
myCars$speed
myCars$speed
myCars[,1]
#4. What are the column names.
colnames(myCars)  #Column Name
#5. How many rows are there? 50
nrow(myCars)   #Number of Rows
#5. How many rows are there? 50
numRows <- nrow(myCars)   #Number of Rows
sprintf("%.0f - rows are in myCO2 data set",numRows)
sprintf("%.0f - rows are in myCars data set",numRows)
myCars[2,]
head(myCars)
myCars[2,]
which.index(myCars$speed==16)
which(myCars$speed==16)
head(myCars)
subset(myCars,speed==16)
rownames(subset(myCars,speed==16)
rownames(subset(myCars,speed==16)
rownames(subset(myCars,speed==16))
subset(myCars,speed==16))
subset(myCars,speed==16)
subset(myCars,speed>16)
nrow(subset(myCars,speed>16))
rownames(subset(myCars,speed>16))
subset(myCars,speed>16)
rownames(subset(myCars,speed>16))
nrow(subset(myCars,speed>16))
df <- data.frame(subset(myCars,speed>16))
df
dfNew <- data.frame(subset(myCars,speed<16 and dist>25))
dfNew <- data.frame(subset(myCars,speed<16 & dist>25))
dfNew
avgSpeed <- avg(myCars$speed)
avgSpeed <- mean(myCars$speed)
avgSpeed
avgSpeedG15 <- mean(subset(myCars,speed>15))
avgSpeedG15
subset(myCars,speed>15)
avgSpeedG15 <- mean(subset(myCars,speed>15)$speed)
avgSpeedG15
#13. What is the standard deviation of column one.
mean(myCars[,1])
#13. What is the standard deviation of column one.
sd(myCars[,1])
sprintf("%.0f - is the standard deviation",sd)
#13. What is the standard deviation of column one.
sd <- sd(myCars[,1])
sprintf("%.0f - is the standard deviation",sd)
#13. What is the standard deviation of column one.
sd <- sd(myCars[,1])
sd
sprintf("%.2f - is the standard deviation",sd)
sprintf("%.4f - is the standard deviation",sd)
minValue <- min(myCars[,1])
sprintf("%.4f - is the standard deviation",minValue)
hist(myCars$1)
hist(myCars[,1])
#16. Plot histogram Column 2.
hist(myCars[,2])
which(c(1,2,3)>2)
c(1,2,3)>2
which(c(1,2,3)>2)
c(1,2,3)>2
sort(c(5,2,3), decreasing = FALSE)
sort(c(5,2,3), decreasing = TRUE)
sort(c(5,2,3))
c(1:100)
random(c)
sample(s,5,replace = TRUE)
s <- c(1:100)
sample(s,5,replace = TRUE)
sample(s,5,replace = TRUE)
sample(s,5,replace = TRUE)
replicate(3,sample(s,5,replace = TRUE))
replicate(3,sample(s,5,replace = TRUE))
replicate(3,sample(s,5,replace = TRUE),simplify = TRUE)
replicate(3,sample(s,5,replace = TRUE),simplify = TRUE)
?attitude
str(attitude)
summary(attitude)
myAttitude <- attitude
head(myAttitude)
#3. Display the 1st and 3rd column.
myAttitude$rating
myAttitude[,1]
myAttitude$privileges
myAttitude[,3]
summary(myAttitude$rating)
nrow(myAttitude)
avgrating <-mean(myAttitude$rating)
avgComplaints <-mean(myAttitude$complaints)
#7. What row number/s has/have learning value < 50?
head(myAttitude)
nrow(subset(myAttitude,learning <50))
subset(myAttitude,learning <50)
nrow(subset(myAttitude,privileges== 50))
subset(myAttitude,privileges== 50)
df <- data.frame(subset(myAttitude,privileges> 70))
df
#10.Create a new dataframe with all examples where privileges <70 and raise<70.
dfnew <- data.frame(subset(myAttitude,privileges< 70 & raise<70))
#7. What row number/s has/have learning value < 50?
head(myAttitude)
#10.Create a new dataframe with all examples where privileges <70 and raise<70.
dfnew <- data.frame(subset(myAttitude,privileges< 70 & raises<70))
dfnew
subset(myAttitude,avgrating > 60 & avgComplaints >60)
s
s
dfnew
colnames(attitude)
# Intall Packages
install.packages("RSQLite")
library(sqldf)
install.packages("jsonlite")
library(jsonlite)
install.packages("RCurl")
install.packages("jsonlite")
marylandData <- "http://data.maryland.gov/api/views/pdvh-tf2u/rows.json?accessType=DOWNLOAD"
apiResult <- getURL(marylandData)
library(RJSONIO)
library(RCurl)
library(jsonlite)
library(sqldf)
apiResult <- getURL(marylandData)
load(apiResult)
result <- fromJSON(apiResult)
str(result)
marylandData <- "http://opendata.maryland.gov/api/views/pdvh-tf2u/rows.json?accessType=DOWNLOAD"
apiResult <- getURL(marylandData)
result <- fromJSON(apiResult)
str(result)
load(apiResult)
result <- fromJSON(apiResult)
str(result)
library(RJSONIO)
library(RCurl)
library(jsonlite)
library(sqldf)
marylandData <- "http://opendata.maryland.gov/api/views/pdvh-tf2u/rows.json?accessType=DOWNLOAD"
apiResult <- getURL(marylandData)
# load(apiResult)
result <- fromJSON(apiResult)
str(result)
x <- result$data
str(x)
numrows <- length(x)
numrows
station <- x[[,-6]]
station <- x[,-6]
head(station)
head(x)
numrows
df <- data.frame(matrix(unlist(x),nrow = 484588),stringsAsFactors = FALSE)
head(df)
str(df)
head(df)
df
head(x)
df <- data.frame(x,stringsAsFactors = FALSE)
head(df)
str(df)
df
df[,-6]
df[,-1:6]
df[,1:6]
head(df)
df[,6:26]
df[,9:26]
colnames(dftemp)<- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WE EK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION","CITY_NA ME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLI SION_WITH_1","COLLISION_WITH_2")
colnames(df[,9:16])<- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WE EK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION","CITY_NA ME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLI SION_WITH_1","COLLISION_WITH_2")
colnames(df[,9:26])<- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WE EK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION","CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLI SION_WITH_1","COLLISION_WITH_2")
df[,9:26]
xy <- df[,9:26]
colnames(xy)<- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WE EK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION","CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLI SION_WITH_1","COLLISION_WITH_2")
xy
head(x)
str(x)
xy
na.omit(xy)
numrows(xy)
length(xy)
colnames(xy)
rownames(xy)
nrow(xy)
colnames(xy)
install.packages("ggplot2")
library(ggplot2)
ggplot(data = melt(xy),mapping = aes(x=value))+geom_histogram(bins = 20)+facet_wrap(~variable,scales = 'free_x')
install.packages("reshape2")
library(reshape2)
ggplot(data = melt(xy),mapping = aes(x=value))+geom_histogram(bins = 20)+facet_wrap(~variable,scales = 'free_x')
ggplot(data = xy,mapping = aes(x=value))+geom_histogram(bins = 20)+facet_wrap(~variable,scales = 'free_x')
df <- data.frame(x,stringsAsFactors = FALSE)
head(df)
within(df, rm(1:8))
within(df, rm([1:8]))
within(df, rm(df[1:8]))
df2 <- df[, -c(1:8)] # delete columns 5 through 7
head(df2)
result <- fromJSON(apiResult)
x <- result$data
str(x)
numrows <- length(x)
numrows
str(x)
station <- x[,-6]
head(station)
station <- x[-6]
head(station)
station <- x[-6,]
head(station)
df <- data.frame(x,stringsAsFactors = FALSE)
head(df)
df2 <- df[, -c(1:8)] # delete columns 1 through 8
head(df2)
colnames(df2)<- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WE EK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION","CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLI SION_WITH_1","COLLISION_WITH_2")
df2
na.omit(df2)
length(df2)
colnames(df2)
rownames(df2)
nrow(df2)
length(df2)
colnames(df2)
colnames(df2)
nrow(df2)
marylandData <- "http://opendata.maryland.gov/api/views/pdvh-tf2u/rows.json?accessType=DOWNLOAD"
apiResult <- getURL(marylandData)
apiResult <- getURL(marylandData)
jsonResult <- fromJSON(apiResult)
jsonResult <- fromJSON(apiResult)
str(jsonResult)
str(jsonResult)
jsonData <- jsonResult$data
jsonData <- jsonResult$data
str(jsonData)
str(jsonData)
dfTemp <- data.frame(jsonData,stringsAsFactors = FALSE)
dfTemp <- data.frame(jsonData,stringsAsFactors = FALSE)
head(dfTemp)
marylandDF <- dfTemp[, -c(1:8)] # delete columns 1 through 8
head(marylandDF)
colnames(marylandDF)<- c("CASE_NUMBER","BARRACK","ACC_DATE","ACC_TIME","ACC_TIME_CODE","DAY_OF_WE EK","ROAD","INTERSECT_ROAD","DIST_FROM_INTERSECT","DIST_DIRECTION","CITY_NAME","COUNTY_CODE","COUNTY_NAME","VEHICLE_COUNT","PROP_DEST","INJURY","COLLI SION_WITH_1","COLLISION_WITH_2")
head(marylandDF)
na.omit(marylandDF)
length(marylandDF)
colnames(marylandDF)
nrow(marylandDF)
na.omit(marylandDF)
marylandDF <- na.omit(marylandDF)
length(marylandDF)
colnames(marylandDF)
nrow(marylandDF)
head(marylandDF)
head(marylandDF)
